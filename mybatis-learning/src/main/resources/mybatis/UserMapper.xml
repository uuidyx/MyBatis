<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ren.oliver.mybatis.learning.mapper.UserMapper">

    <resultMap id="BaseResultMap" type="User">
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="user_name" property="userName" jdbcType="VARCHAR" />
        <result column="real_name" property="realName" jdbcType="VARCHAR" />
        <result column="sex" property="sex" jdbcType="TINYINT" />
        <result column="mobile" property="mobile" jdbcType="VARCHAR" />
        <result column="email" property="email" jdbcType="VARCHAR" />
        <result column="note" property="note" jdbcType="VARCHAR" />
    </resultMap>

    <select id="selectByEmailAndSex1" resultMap="BaseResultMap" parameterType="map">
        select
          <include refid="Base_Column_List" />
        from
          t_user a
        where
          a.email like CONCAT('%', #{email}, '%') and a.sex = #{sex}
    </select>

    <select id="selectByEmailAndSex2" resultMap="BaseResultMap">
        select
          <include refid="Base_Column_List" />
        from
          t_user a
        where
          a.email like CONCAT('%', #{email}, '%') and a.sex = #{sex}
    </select>

    <select id="selectByEmailAndSex3" resultMap="BaseResultMap" parameterType="EmailSexBean">
        select
          <include refid="Base_Column_List" />
        from
          t_user a
        where
          a.email like CONCAT('%', #{email}, '%') and a.sex = #{sex}
    </select>

    <select id="selectBySymbol" resultMap="BaseResultMap">
		select
		  ${inCol}
		from
		  ${tableName} a
		where
		  a.sex = #{sex}
		order by
		  ${orderStr}
	</select>

    <select id="selectIfOper1" resultMap="BaseResultMap">
        select
          <include refid="Base_Column_List" />
        from
          t_user a
        where
          <if test="email != null and email != ''">
            a.email like CONCAT('%', #{email}, '%')
          </if>
          <if test="sex != null ">
            and a.sex = #{sex}
          </if>
    </select>

    <select id="selectIfOper2" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from
        t_user a
        where
        1 = 1
        <if test="email != null and email != ''">
            and a.email like CONCAT('%', #{email}, '%')
        </if>
        <if test="sex != null ">
            and a.sex = #{sex}
        </if>
    </select>

    <select id="selectIfandWhereOper" resultMap="BaseResultMap">
        select
          <include refid="Base_Column_List" />
        from
          t_user a
        <where>
            <if test="email != null and email != ''">
              and a.email like CONCAT('%', #{email}, '%')
            </if>
            <if test="sex != null ">
              and a.sex = #{sex}
            </if>
        </where>
    </select>

    <update id="updateIfOper1" parameterType="User">
        update
          t_user
        set
          <if test="userName != null">
            user_name = #{userName,jdbcType=VARCHAR},
          </if>
          <if test="realName != null">
            real_name = #{realName,jdbcType=VARCHAR},
          </if>
          <if test="sex != null">
            sex = #{sex,jdbcType=TINYINT},
          </if>
          <if test="mobile != null">
            mobile = #{mobile,jdbcType=VARCHAR},
          </if>
          <if test="email != null">
            email = #{email,jdbcType=VARCHAR},
          </if>
          <if test="note != null">
            note = #{note,jdbcType=VARCHAR},
          </if>
        where
          id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateIfOper2" parameterType="User">
        update
          t_user
        set
          <if test="userName != null">
            user_name = #{userName,jdbcType=VARCHAR},
          </if>
          <if test="realName != null">
            real_name = #{realName,jdbcType=VARCHAR},
          </if>
          <if test="sex != null">
            sex = #{sex,jdbcType=TINYINT},
          </if>
          <if test="mobile != null">
            mobile = #{mobile,jdbcType=VARCHAR},
          </if>
          <if test="email != null">
            email = #{email,jdbcType=VARCHAR},
          </if>
          <if test="note != null">
            note = #{note,jdbcType=VARCHAR},
          </if>
            id = #{id}
        where
          id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateIfAndSetOper" parameterType="User">
        update
          t_user
        <set>
            <if test="userName != null">
              user_name = #{userName, jdbcType=VARCHAR},
            </if>
            <if test="realName != null">
              real_name = #{realName, jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
              sex = #{sex, jdbcType=TINYINT},
            </if>
            <if test="mobile != null">
              mobile = #{mobile, jdbcType=VARCHAR},
            </if>
            <if test="email != null">
              email = #{email, jdbcType=VARCHAR},
            </if>
            <if test="note != null">
              note = #{note, jdbcType=VARCHAR},
            </if>
        </set>
        where
          id = #{id, jdbcType=INTEGER}
    </update>


    <insert id="insertIfOper" parameterType="User">
        insert into
          t_user (
            <if test="id != null">
              id,
            </if>
            <if test="userName != null">
              user_name,
            </if>
            <if test="realName != null">
              real_name,
            </if>
            <if test="sex != null">
              sex,
            </if>
            <if test="mobile != null">
              mobile,
            </if>
            <if test="email != null">
              email,
            </if>
            <if test="note != null">
              note,
            </if>
            )
        values(
          <if test="id != null">
            #{id,jdbcType=INTEGER},
          </if>
          <if test="userName != null">
            #{userName,jdbcType=VARCHAR},
          </if>
          <if test="realName != null">
            #{realName,jdbcType=VARCHAR},
          </if>
          <if test="sex != null">
            #{sex,jdbcType=TINYINT},
          </if>
          <if test="mobile != null">
            #{mobile,jdbcType=VARCHAR},
          </if>
          <if test="email != null">
            #{email,jdbcType=VARCHAR},
          </if>
          <if test="note != null">
            #{note,jdbcType=VARCHAR},
          </if>
        )
    </insert>

    <select id="selectForeach4In" resultMap="BaseResultMap">
        select
          <include refid="Base_Column_List" />
        from
          t_user a
        where
          a.user_name in
          <foreach collection="array" open="(" close=")" item="userName" index="i" separator=",">
            #{userName}
          </foreach>
    </select>

    <insert id="insertForeach4Batch">
        insert into
          t_user (user_name, real_name, sex, mobile,email,note)
        values
          <foreach collection="list" separator="," item="user">
            (
              #{user.userName,jdbcType=VARCHAR},
              #{user.realName,jdbcType=VARCHAR},
              #{user.sex,jdbcType=TINYINT},
              #{user.mobile,jdbcType=VARCHAR},
              #{user.email,jdbcType=VARCHAR},
              #{user.note,jdbcType=VARCHAR}
            )
          </foreach>
    </insert>

    <sql id="Base_Column_List">
		id, user_name, real_name, sex, mobile, email, note
	</sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
          <include refid="Base_Column_List" />
        from
          t_user
        where
          id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		  t_user
		where
		  id = #{id,jdbcType=INTEGER}
	</delete>

    <insert id="insert1" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		insert into
		  t_user (id, user_name, real_name, sex, mobile, email, note)
		values
		  (
		    #{id,jdbcType=INTEGER},
		    #{userName,jdbcType=VARCHAR},
		    #{realName,jdbcType=VARCHAR},
		    #{sex,jdbcType=TINYINT}, #{mobile,jdbcType=VARCHAR},
		    #{email,jdbcType=VARCHAR},
		    #{note,jdbcType=VARCHAR}
		  )
	</insert>

    <insert id="insert2" parameterType="User">
        <selectKey  keyProperty="id" order="AFTER" resultType="int">
            select LAST_INSERT_ID()
        </selectKey>
        insert into
          t_user (id, user_name, real_name, sex, mobile, email, note)
        values
          (
            #{id,jdbcType=INTEGER},
            #{userName,jdbcType=VARCHAR},
            #{realName,jdbcType=VARCHAR},
            #{sex,jdbcType=TINYINT}, #{mobile,jdbcType=VARCHAR},
            #{email,jdbcType=VARCHAR},
            #{note,jdbcType=VARCHAR}
          )
    </insert>

    <insert id="insertSelective" parameterType="User">
        insert into
          t_user
            <trim prefix="(" suffix=")" suffixOverrides=",">
              <if test="id != null">
                id,
              </if>
              <if test="userName != null">
                user_name,
              </if>
              <if test="realName != null">
                real_name,
              </if>
              <if test="sex != null">
                sex,
              </if>
              <if test="mobile != null">
                mobile,
              </if>
              <if test="email != null">
                email,
              </if>
              <if test="note != null">
                note,
              </if>
            </trim>
            <trim prefix="values (" suffix=")" suffixOverrides=",">
              <if test="id != null">
                #{id,jdbcType=INTEGER},
              </if>
              <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
              </if>
              <if test="realName != null">
                #{realName,jdbcType=VARCHAR},
              </if>
              <if test="sex != null">
                #{sex,jdbcType=TINYINT},
              </if>
              <if test="mobile != null">
                #{mobile,jdbcType=VARCHAR},
              </if>
              <if test="email != null">
                #{email,jdbcType=VARCHAR},
              </if>
              <if test="note != null">
                #{note,jdbcType=VARCHAR},
              </if>
            </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="User">
        update
          t_user
        <set>
            <if test="userName != null">
                user_name = #{userName, jdbcType=VARCHAR},
            </if>
            <if test="realName != null">
                real_name = #{realName, jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex, jdbcType=TINYINT},
            </if>
            <if test="mobile != null">
                mobile = #{mobile, jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email, jdbcType=VARCHAR},
            </if>
            <if test="note != null">
                note = #{note, jdbcType=VARCHAR},
            </if>
        </set>
        where
          id = #{id, jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="User">
		update
		  t_user
		set
		  user_name = #{userName, jdbcType=VARCHAR},
		  real_name = #{realName, jdbcType=VARCHAR},
		  sex = #{sex, jdbcType=TINYINT},
		  mobile = #{mobile, jdbcType=VARCHAR},
		  email = #{email, jdbcType=VARCHAR},
		  note = #{note, jdbcType=VARCHAR}
		where
		  id = #{id, jdbcType=INTEGER}
	</update>

    <select id="selectChooseOper" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from
          t_user a
        <where>
            <choose>
                <when test="email != null and email != ''">
                    and a.email like CONCAT('%', #{email}, '%')
                </when>
                <when test="sex != null">
                    and a.sex = #{sex}
                </when>
                <otherwise>
                    and 1=1
                </otherwise>
            </choose>
        </where>
    </select>

    <resultMap id="userAndPosition1" extends="BaseResultMap" type="User">
        <association property="position" javaType="Position" columnPrefix="post_" >
            <id column="id" property="id"/>
            <result column="name" property="postName"/>
            <result column="note" property="note"/>
        </association>
    </resultMap>

    <select id="selectUserPosition1" resultMap="userAndPosition1">
		select
		  user_name,
		  real_name,
		  sex,
		  mobile,
		  email,
	      a.note,
		  b.id  post_id,
		  b.post_name,
		  b.note post_note
		from
		  t_user a, t_position b
		where
		  a.position_id = b.id
	</select>

    <resultMap id="userAndPosition2" extends="BaseResultMap" type="User">
        <association property="position" fetchType="lazy" column="position_id" select="ren.oliver.mybatis.learning.mapper.PositionMapper.selectByPrimaryKey" />
    </resultMap>

    <select id="selectUserPosition2" resultMap="userAndPosition2">
		select
		  a.id,
		  a.user_name,
		  a.real_name,
		  a.sex,
		  a.mobile,
		  a.position_id
		from
		  t_user a
	</select>

    <resultMap id="userAndJobs1" extends="BaseResultMap" type="User">
        <collection property="jobs" ofType="JobHistory" >
            <result column="comp_name" property="compName" jdbcType="VARCHAR" />
            <result column="years" property="years" jdbcType="INTEGER" />
            <result column="title" property="title" jdbcType="VARCHAR" />
        </collection>
    </resultMap>

    <select id="selectUserJobs1" resultMap="userAndJobs1">
		select
		  a.id,
		  a.user_name,
		  a.real_name,
		  a.sex,
		  a.mobile,
		  b.comp_name,
		  b.years,
		  b.title
		from
		  t_user a, t_job_history b
		where
		  a.id = b.user_id
	</select>

    <resultMap id="userAndJobs2" extends="BaseResultMap" type="User">
        <collection property="jobs" fetchType="lazy" column="id" select="ren.oliver.mybatis.learning.mapper.JobHistoryMapper.selectByUserId" />
    </resultMap>

    <select id="selectUserJobs2" resultMap="userAndJobs2">
		select
		  a.id,
		  a.user_name,
		  a.real_name,
		  a.sex,
		  a.mobile
		from
		  t_user a
	</select>

    <resultMap id="userAndHealthReport" extends="BaseResultMap" type="User">
        <discriminator column="sex"  javaType="int">
            <case value="1" resultMap="userAndHealthReportMale" />
            <case value="2" resultMap="userAndHealthReportFemale" />
        </discriminator>
    </resultMap>

    <resultMap id="userAndHealthReportMale" extends="userAndHealthReport" type="User">
        <collection property="healthReports" column="id" select= "ren.oliver.mybatis.learning.mapper.HealthReportMaleMapper.selectByUserId">

        </collection>
    </resultMap>

    <resultMap id="userAndHealthReportFemale" extends="userAndHealthReport" type="User">
        <collection property="healthReports" column="id" select= "ren.oliver.mybatis.learning.mapper.HealthReportFemaleMapper.selectByUserId">

        </collection>
    </resultMap>

    <select id="selectUserHealthReport" resultMap="userAndHealthReport">
        select
          <include refid="Base_Column_List" />
        from
          t_user a
    </select>

</mapper>